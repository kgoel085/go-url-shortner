{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/login": {
            "post": {
                "description": "Login with email, password, and OTP. Returns JWT token on success.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "Login payload",
                        "name": "loginUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.LoginUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success\" \"Example: {\\\"message\\\": \\\"User logged in successfully !\\\", \\\"data\\\": {\\\"token\\\": \\\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\\\"}}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.LoginUserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error\" \"Example: {\\\"message\\\": \\\"Request failed\\\", \\\"errors\\\": [{\\\"field\\\": \\\"email\\\", \\\"error\\\": \\\"invalid email\\\"}]}",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/otp/send": {
            "post": {
                "description": "Sends an OTP to the user for verification.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OTP"
                ],
                "summary": "Send OTP",
                "parameters": [
                    {
                        "description": "OTP request payload",
                        "name": "otpRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SendOtp"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success\" \"Example: {\\\"message\\\": \\\"OTP sent successfully\\\", \\\"data\\\": {\\\"id\\\": \\\"123\\\", \\\"token\\\": \\\"abcde12345\\\"}}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.SendOTPResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error\" \"Example: {\\\"message\\\": \\\"Invalid OTP type or action type\\\"}",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/otp/verify": {
            "post": {
                "description": "Verifies the OTP code sent to the user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OTP"
                ],
                "summary": "Verify OTP",
                "parameters": [
                    {
                        "description": "OTP verify payload",
                        "name": "otpVerifyRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.VerifyOtp"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success\" \"Example: {\\\"message\\\": \\\"OTP verified successfully\\\"}",
                        "schema": {
                            "$ref": "#/definitions/model.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error\" \"Example: {\\\"message\\\": \\\"Invalid OTP code\\\"}",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "description": "Health check endpoint. Returns \"pong\" if the server is running.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "App"
                ],
                "summary": "Ping",
                "responses": {
                    "200": {
                        "description": "Success\" \"Example: {\\\"message\\\": \\\"pong\\\"}",
                        "schema": {
                            "$ref": "#/definitions/model.APIResponse"
                        }
                    }
                }
            }
        },
        "/sign-up": {
            "post": {
                "description": "Register a new user with email, password, and OTP verification.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User Sign Up",
                "parameters": [
                    {
                        "description": "Sign up payload",
                        "name": "userToSignUp",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SignUpUser"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success\" \"Example: {\\\"message\\\": \\\"User signed up successfully !\\\"}",
                        "schema": {
                            "$ref": "#/definitions/model.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error\" \"Example: {\\\"message\\\": \\\"Request failed\\\", \\\"errors\\\": [{\\\"field\\\": \\\"otp_code\\\", \\\"error\\\": \\\"invalid OTP\\\"}]}",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/url/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all shortened URLs for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "URL"
                ],
                "summary": "List User URLs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by URL status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success\" \"Example: {\\\"message\\\": \\\"URLs fetched successfully\\\", \\\"data\\\": {\\\"urls\\\": [{\\\"code\\\": \\\"abc123\\\", \\\"url\\\": \\\"https://example.com\\\"}]}}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.GetUrlsByUserResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error\" \"Example: {\\\"message\\\": \\\"Invalid URL status !\\\"}",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/url/register": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new short URL for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "URL"
                ],
                "summary": "Register Short URL",
                "parameters": [
                    {
                        "description": "Create short URL payload",
                        "name": "createUrl",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateShortUrl"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success\" \"Example: {\\\"message\\\": \\\"Short URL created successfully\\\", \\\"data\\\": {\\\"short_url\\\": \\\"https://short.ly/abc123\\\"}}",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/model.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/model.CreateShortUrlResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Validation error\" \"Example: {\\\"message\\\": \\\"Request failed\\\", \\\"errors\\\": [{\\\"field\\\": \\\"url\\\", \\\"error\\\": \\\"invalid URL\\\"}]}",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/verify-credentials": {
            "post": {
                "description": "Verifies user email and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Verify User Credentials",
                "parameters": [
                    {
                        "description": "User credentials payload",
                        "name": "userCreds",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserCredentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success\" \"Example: {\\\"message\\\": \\\"User credentials are valid.\\\"}",
                        "schema": {
                            "$ref": "#/definitions/model.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error\" \"Example: {\\\"message\\\": \\\"Request failed\\\", \\\"errors\\\": [{\\\"field\\\": \\\"password\\\", \\\"error\\\": \\\"password too weak\\\"}]}",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/{code}": {
            "get": {
                "description": "Redirects to the original URL using the short code.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "URL"
                ],
                "summary": "Redirect Short URL",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Short URL code",
                        "name": "code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Validation error\" \"Example: {\\\"message\\\": \\\"URL has expired\\\"}",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.APIResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string",
                    "example": "User logged in successfully !"
                }
            }
        },
        "model.CreateShortUrl": {
            "type": "object",
            "required": [
                "url"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.CreateShortUrlResponse": {
            "type": "object",
            "properties": {
                "short_url": {
                    "type": "string"
                }
            }
        },
        "model.GetUrlsByUserResponse": {
            "type": "object",
            "properties": {
                "urls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.UrlWithShortCode"
                    }
                }
            }
        },
        "model.LoginUser": {
            "type": "object",
            "required": [
                "email",
                "otp_code",
                "otp_token",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "otp_code": {
                    "type": "string"
                },
                "otp_token": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "model.LoginUserResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "JWT Token"
                }
            }
        },
        "model.OtpActionType": {
            "type": "string",
            "enum": [
                "login",
                "signup",
                "reset_password"
            ],
            "x-enum-varnames": [
                "OtpActionTypeLogin",
                "OtpActionTypeSignUp",
                "OtpActionTypeResetPassword"
            ]
        },
        "model.OtpType": {
            "type": "string",
            "enum": [
                "email",
                "phone"
            ],
            "x-enum-varnames": [
                "OtpTypeEmail",
                "OtpTypePhone"
            ]
        },
        "model.SendOTPResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "model.SendOtp": {
            "type": "object",
            "required": [
                "action",
                "key",
                "type"
            ],
            "properties": {
                "action": {
                    "$ref": "#/definitions/model.OtpActionType"
                },
                "key": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/model.OtpType"
                }
            }
        },
        "model.SignUpUser": {
            "type": "object",
            "required": [
                "email",
                "otp_code",
                "otp_token",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "otp_code": {
                    "type": "string"
                },
                "otp_token": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "model.UrlStatus": {
            "type": "string",
            "enum": [
                "active",
                "inactive",
                "deleted",
                "expired"
            ],
            "x-enum-varnames": [
                "UrlStatusActive",
                "UrlStatusInactive",
                "UrlStatusDeleted",
                "UrlStatusExpired"
            ]
        },
        "model.UrlWithShortCode": {
            "type": "object",
            "required": [
                "code",
                "created_at",
                "id",
                "status",
                "url",
                "user_id"
            ],
            "properties": {
                "click_count": {
                    "type": "integer"
                },
                "code": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "short_url": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/model.UrlStatus"
                },
                "url": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.UserCredentials": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "model.VerifyOtp": {
            "type": "object",
            "required": [
                "action",
                "otp",
                "token"
            ],
            "properties": {
                "action": {
                    "type": "string"
                },
                "otp": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "utils.ErrorDetail": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "invalid email"
                },
                "field": {
                    "type": "string",
                    "example": "email"
                }
            }
        },
        "utils.ErrorResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/utils.ErrorDetail"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Request failed"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}